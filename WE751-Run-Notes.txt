Steve's Exercise Progress Notes - WE751 (ERC1.1) 2017-11-21

Issues:
- problems with Blueprint console (esp. Chrome)

Notes:
- replace 192.168.1.75 with actual DP IP address
===================================================================
Exercise 1 - First exposure to the DataPower developer environment
After completing this exercise, you should be able to:
• Log in to the WebGUI
• Use the navigation bar
• Use an object catalog
• Connect to the Blueprint Console
• Import a service
• Edit a multi-protocol gateway
• Review the actions in a policy editor
• Test a service from a browser and a cURL command
• Export a service

1.1. Initialize the lab environment
     check against Appendix B
1.2. Work with the WebGUI home page
1.3. Work in the Blueprint Console
     WebGUI / Blueprint explore domain: FlyServices.
     From this point forward, you can work in either web interface,
     although you should work primarily in one or the other.
     Import dp/intro/HelloWorldMPGW.zip
1.4. Examine and edit a service
     <mpgw_helloworld_port>: 12nn7
     MPGW Contains two rules:
        /xsl -> helloxslworld.xsl
        /javascript -> hellojsworld.js
1.5. Test a service
     Test browser:
        http://192.168.1.75:12007/xsl
        http://192.168.1.75:12007/javascript
     View log entries made by xsl/js
     curl -G http://192.168.1.75:12007/xsl
     curl -G http://192.168.1.75:12007/javascript
1.6. Export a configuration
     MyUpdatedMPGW.zip
     explore content
===================================================================
Exercise 2. Creating a BookingService gateway
*** need SOAPUI set up as Appendix B ***
After completing this exercise, you should be able to:
• Create a multi-protocol gateway
• Test the message flow by using the SoapUI graphical test tool

2.1. Initialize the lab environment
2.2. Create a basic MPGW to validate SOAP messages
     MPGW: BookingServiceProxy
       Default Backend URL
       http://dp_internal_ip:9080/BookingService (*** actually host alias - OK ***)

     FSH: HTTP_12001 : <mpgw_booking_port> : 12nn1
Section 3: BookingServiceProxy MPGW testing

===================================================================
Exercise 3. Enhancing the BookingService gateway
After completing this exercise, you should be able to:
• Perform advanced configuration of an MPGW
• Configure a document processing policy with more actions
  validation, filtering, and transformation
• Test the MPGW policy by using the graphical SoapUI tool
• Perform basic debugging by using the system log
3.1. Initialize the lab environment
3.2. Add more capability to the BookingServiceProxy MPGW
Section 1: Schema Validation (<BookingType>I/E</...>
Section 2: Schema Validation Test
Section 3: SOAP Envelope Schema Validation
Section 4: Content-based Filtering (<ReservervationCode> starts with “JK”.)
Section 5: SQL Injection Threat Filtering
Section 6: Transforming with XSL (acts on response)
    <book: ConfirmationCode> -> <book:ConfirmationText>base64 decoded
    remove <book:Expiry>, <book:CVV>
    <book:Number> text all * except last four digits
===================================================================
Exercise 4. Adding error handling to a service policy
After completing this exercise, you should be able to:
• Configure an error policy at the MPGW service level
• Configure a service policy with an On Error action
• Configure a service policy with an Error rule
4.1. Initialize the lab environment
4.2. Add error processing
Section 1: Add an Error Policy
- BookingServiceProxy_ErrorPolicy
Section 2: Test the default error policy
Section 3: Create the error rule and add it to the service policy
Section 4: Test the error rule
Section 5: Add an On Error action to the policy
    custom-error.xsl
Section 6: Test the On Error action
Section 7: Add another Error rule and On Error action
    filter-custom-error.xsl
Section 8: Send a message to test the new error-handling

===================================================================
Exercise 5. Creating cryptographic objects and configuring SSL
After completing this exercise, you should be able to:
• Generate crypto keys by using the DataPower cryptographic tools
• Create a crypto identification credential by using a crypto key object and a crypto certificate object
• Validate certificates by using a validation credential object
• Create an SSL client profile that initiates an SSL connection request from a DataPower service
• Create an SSL server profile that accepts an SSL connection request from a client
• Create an SNI SSL server profile that accepts an SSL connection request with an SNI extension from a client
5.1. Initialize the lab environment
5.2. Generate a certificate-key pair on the DataPower gateway
     ServerA, ServerB, ServerC, StudentClient
5.3. Create cryptographic objects, Crypto Validation Credentials
     Crypto Identification Credentials,
5.4. Create SSL/TLS objects
5.5. Verify web service behavior
5.6. Add an HTTPS handler to the BookingServiceProxy service
HTTPS- FSH: HTTPS_12002
<mpgw_booking_ssl_port>
12002

5.7. Test the HTTPS handler - *** CORRECTION to name: <mpgw_booking_ssl_port>
cd $HOME/Documents
sudo cp /usr/labfiles/dp/BookingService/BookingRequest.xml .
sudo chown localuser BookingRequest.xml
_6.
curl --resolve serverA:<mpgw_booking_ssl_port>:<dp_public_ip> --data-binary @BookingRequest.xml https://serverA:<mpgw_booking_ssl_port>/BookingService -k -v
curl --resolve serverA:12002:192.168.1.75 --data-binary @BookingRequest.xml https://serverA:12002/BookingService -k -v

For ServerC, client authentication needed, as follows (exercise notes do not cover this!):
$ curl --resolve serverC:12012:192.168.1.175 --data-binary @BookingRequest.xml https://serverC:12012/BookingService -k -v --tlsv1.2 --cert StudentClientKeyObj-sscert.pem --key 


_7. The following does not work (name error):
curl --data-binary @BookingRequest.xml https://192.168.1.75:12002/BookingService -k -v
However, if SSL SNI Server Profile (AllServersProfile) has Default server profile (ServerA) it does now work!

5.8. Configure an SSL Proxy Booking MPGW
HTTP2_12003
<mpgw_booking_client>: 12003
*** CHECK SOAPUI Preferences / Global Properties has entry for <mpgw_booking_client>

5.9. Test the SSL connection between the BookingServiceSSLProxy and the BookingServiceProxy

ERROR:
<mpgw_ssl_booking_port> NOT USED

===================================================================
Exercise 6. Implementing a service level monitor in a multi-protocol gateway
After completing this exercise, you should be able to:• Specify service level monitoring criteria for a multi-protocol gateway• Inspect and edit an SLM policy object• Create an SLM Resource Class object• Create a custom log target for SLM events
6.1. Initialize the lab environment
6.2. Test the existing MPGW with SoapUI
6.3. Test the existing BookingServiceProxy by using the load test6.4. Create a log target for SLM log messages
6.5. Add SLM criteria to the MPGW
6.6. Test the SLM action (throttle)
6.7. Change the SLM statement to “shape”
6.8. Test the SLM action with “shape”
- may need to run this more than once to see expected log output
===================================================================
Exercise 7. Using a DataPower pattern to deploy a service
7.1. Initialize the lab environment
7.2. Import a pattern into your application domain
- need to refresh browser after import
7.3. Deploy a pattern
<mpgw_patterns_port>
12008
7.4. Test the generated service
===================================================================
These the only ports needed:
<mpgw_booking_port>
12nn1
<mpgw_booking_ssl_port>
12nn2
<mpgw_ssl_booking_port> should be <mpgw_booking_client>
12nn3
<mpgw_helloworld_port>
12nn7
<mpgw_patterns_port>
12nn8



